%YAML 1.2
# See http://www.sublimetext.com/docs/syntax.html
---
name: klog
file_extensions: [klg]
scope: source.klog

variables:
  date: '\d{4}[-/]\d{2}[-/]\d{2}'
  blankline: '^\s*$'
  duration_value: '(\d+h\d+m|\d+h|\d+m)'
  duration_positive: '\+?{{duration_value}}'
  duration_negative: '-{{duration_value}}'
  should_total: '\([+-]?{{duration_value}}!\)'
  time: '\d{1,2}:\d{2}([ap]m)?'
  shifted_time: '({{time}}>|{{time}}|\<{{time}})'
  range: '{{shifted_time}} ?- ?{{shifted_time}}'
  open_range: '{{shifted_time}} ?- ?\?+'
  indentation: '(\t|    |   |  )'

contexts:

  # For every scope, there must be two values assigned:
  # - One klog-specific scope, that’s unused by this
  #   package, but that allows the user to setup overrides
  #   conveniently.
  # - One generic fallback scope, that will likely work
  #   out of the box for most color schemes.

  main:
  - include: record

  record:
  # A record must start with a date.
  - match: '^({{date}})'
    scope: markup.underline.klog markup.other.date.klog
    push:

    # Then, there may follow a should total on the same line.
    - match: '(\s+({{should_total}}))?\s*'
      captures:
        2: constant.numeric.klog markup.other.should_total.klog

    # End of headline.
    - match: '$'
      push: record_summary

  record_summary:
  # Exit on blank line.
  - match: '{{blankline}}'
    pop: 99999

  # A record summary line cannot start with whitespace.
  - match: '^(?=[^\s])'
    push:
    - meta_scope: comment.klog markup.other.summary.klog
    - include: tag
    - match: '^(?=\s)'
      pop: 1

  # The first indented line begins the entries section.
  # It must be indented exactly once.
  - match: '^(?={{indentation}}[^\s])'
    push: entries

  # Anything else would be illegal.
  - match: '^.*'
    scope: invalid.klog
    pop: 1 # Continue parsing, though.

  entries:
  # Exit on blank line.
  - match: '{{blankline}}'
    pop: 99999

  # When the line is indented, it’s an entry.
  - match: '^{{indentation}}({{duration_positive}})(?=\s|$)'
    captures:
      2: markup.inserted.klog markup.other.duration_positive.klog
    push: entry_summary
  - match: '^{{indentation}}({{duration_negative}})(?=\s|$)'
    captures:
      2: markup.deleted.klog markup.other.duration_negative.klog
    push: entry_summary
  - match: '^{{indentation}}({{range}})(?=\s|$)'
    captures:
      2: variable.function.klog markup.other.range.klog
    push: entry_summary
  - match: '^{{indentation}}({{open_range}})(?=\s|$)'
    captures:
      2: variable.function.klog markup.other.open_range.klog
    push: entry_summary

  # Error if next line doesn’t start with whitespace.
  - match: '^[^\s].*'
    scope: invalid.klog
    pop: 99999

  entry_summary:
  # Parse the remainder of the first line, and continue on the next.
  - meta_scope: comment.klog markup.other.summary.klog
  - include: tag

  # Exit on blank line.
  - match: '{{blankline}}'
    pop: 99999

  # Exit if next line is indented just once.
  # It’s important to work with the `\1` matcher, otherwise
  # it wouldn’t handle the indendation style correctly.
  # `\1` can only be used in conjunction with `pop`, not `push`.
  - match: '^(?=\1[^\s])'
    pop: 1

  # Error if next line doesn’t start with whitespace.
  - match: '^[^\s].*'
    scope: invalid.klog
    pop: 99999

  tag:
  - match: '\#[\p{L}\d_]+'
    scope: string.quoted markup.other.summary.tag.klog
